[{"content":"css에서 hight를 조절하다가 알게된 점을 기록합니다.\n문제 대략 상황은 이랬습니다.\nmain 태그의 높이를 vh 단위로 지정해서 사용하던 중 모바일 환경에서는 높이가 의도한 대로 지정되지 않았습니다.\n태그의 높이를 모바일 브라우저의 상단, 하단 메뉴의 크기를 반영해서 지정하는 것이 아니라 그냥 화면의 크기 만큼 높이를 지정해버리는 것이었죠. 그래서 화면이 일부 잘린 것처럼 보였고, 잘린 부분은 아예 접근할 수 없게 되어 버리는 것입니다.\n해결 여러가지를 조사하던 중 높이 단위가 vh만 있던 게 아니더군요.\n모바일 브라우저에 대응되는 높이 단위는 아래와 같습니다.\nsvh: Small Viewport Height, 가장 작은 화면 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 없어도 해당 높이를 반영하여 값을 가져옵니다. lvh: Large Viewport Height, 가장 높은 영역을 의미하는 높이 단위입니다. 상, 하단 메뉴가 있어도 무시한 값을 가져옵니다. dvh: Dynamic Viewport Height, 동적으로 표시되는 영역의 높이 단위입니다. 상, 하단 메뉴를 확인하고 유무에 따라 해당 높이를 반영한 값을 가져옵니다. 즉 위의 높이 단위를 적절히 이용하면, 모바일 브라우저에서 상단, 하단 메뉴가 나타나고 사라지는 과정에서도 메뉴의 높이를 반영한 값을 사용할 수 있는 것이죠.\n저는 조사한 높이 단위 중에서 dvh를 사용했습니다.\n사용법은 아래의 코드처럼 사용할 수 있습니다.\nmain { height:100dvh; } 이 높이 단위를 더 자세히 살펴보고 싶다면 아래의 링크도 확인해주세요.\n더 자세하게 설명되어 있습니다.\n참고 자료 https://web.dev/blog/viewport-units?hl=ko https://mong-blog.tistory.com/entry/CSSJS-vh-버그-해결방법dvh-사용법-js-계산법 ","date":"2024-02-08T00:31:19+09:00","permalink":"https://blog.plutslet.pe.kr/post/%EB%AA%A8%EB%B0%94%EC%9D%BC%EA%B8%B0%EA%B8%B0%EC%97%90%EC%84%9Cvh%EB%8B%A8%EC%9C%84/","title":"모바일 환경에서의 css 높이 단위"},{"content":"최근 Vue 프로젝트에서 S3 URL을 다운로드되는 기능을 구현해야 하는 일이 있었습니다. fetch를 이용해서 파일을 blob 형태로 받아와 다운로드 시키도록 하도록 처리했죠. 다른 파일들은 다운로드가 잘 이뤄졌는데, 어떤 페이지에서는 이미지가 CORS 오류로 다운로드되지 않는 문제가 발생했습니다. 이 글은 해당 문제를 정리한 내용입니다.\n문제 위에서 언급했듯이 S3 URL을 가지고 있었고, 해당 링크를 이용해 다운로드 되도록 기능을 구현한 상태였습니다.\n다른 페이지에서는 모두 동작하는데, 이미지를 보여주고 해당 이미지를 다운로드 할 수 있는 페이지에서만 CORS 문제를 일으켰습니다.\n콘솔 창에 나타난 문구는 대략 이런 문구였습니다.\nNo \u0026#39;Access-Control-Allow-Origin\u0026#39; header is present on the requested resource. Origin \u0026#39;http://localhost:5173\u0026#39; is therefore not allowed access. If an opaque response serves your needs, set the request\u0026#39;s mode to \u0026#39;no-cors\u0026#39; to fetch the resource with CORS disabled. 그래서 오류 메시지 대로 fetch의 모드를 \u0026rsquo;no-cors\u0026rsquo;로 변경하고 다시 테스트 해봤습니다.\n하지만 이제는 파일을 정상적으로 다운로드 받지 못하고 용량이 모두 0 사이즈였습니다.\n그래서 다시 돌려놓고 다른 방향으로 문제를 보기 시작했습니다.\n혹시 페이지에서 이미지를 먼저 불러온게 문제가 된 건 아닐까.\n다르게 말하면 이미지가 캐시된 상태라서 그런 건 아닐까.\n정답부터 말하자면,\n캐시가 문제였습니다.\n해결 문제의 원인은 생각보다 간단했습니다.\nS3의 이미지가 이미 다운로드되어 페이지에서 노출이 되는 상태였고, 해당 이미지는 그렇게 캐시된 상태가 되었습니다.\n그런 다음 fetch를 이용해 이미지 다운로드 받을 경우, 이미 해당 이미지의 캐시가 남아있기 때문에 다운로드 받지 못하는 상태였던 거죠.\n해당 문제를 해결할 때 도움받은 블로그 글은 이사님이 찾아주셨습니다. 아래의 링크를 남겨두었으니 참고해주세요.\n이미지가 캐시가 된 상태라면 캐시 없이 다운로드 받으면 문제는 해결입니다.\n저는 fetch를 이용해 다운로드 받아오기 때문에 아래처럼 옵션을 추가해 주었습니다.\nfetch(\u0026#39;URL\u0026#39;, { cache: \u0026#39;no-cache\u0026#39;}); 저는 추가로 CORS 모드로 설정하는 mode: \u0026quot;cors\u0026quot; 같은 부분 도 추가로 작성해서 다운로드 받도록 하고 있습니다.\n아직 모르는 게 많은 저이지만,\n오늘도 하나씩 배워갑니다.\n참고자료 https://velog.io/@hyesungoh/Webview-app에서-이미지-저장-기능-개발기-w-AWS-s3#aws-s3-cors ","date":"2024-02-02T22:41:19+09:00","permalink":"https://blog.plutslet.pe.kr/post/s3_%EC%9D%B4%EB%AF%B8%EC%A7%80_%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C_%EC%98%A4%EB%A5%98/","title":"S3 이미지 다운로드 CORS 문제 해결"},{"content":"깃허브 페이지로 블로그를 만들 때부터 개인 도메인으로 연결하고 싶다는 생각이 있었습니다. 이 글은 깃허브 페이지에서 커스텀 도메인 설정하며 정리한 내용입니다.\n시작 기본적으로 깃허브 페이지를 만들면 아래의 URL 형태로 만들어 집니다.\nhttps://깃허브아이디.github.io/ 저의 경우는 https://plutslet0316.github.io/ 입니다.\n위의 URL을 아래처럼 제 개인 도메인으로 변경할 생각입니다.\nhttps://blog.plutslet.pe.kr/ 도메인 DNS 설정 현재 사용 중인 DNS 관리 사이트에서 아래의 설정을 진행합니다.\n레코드 타입: CNAME 서브 도메인(Name): 원하는 도메인 - blog 대상 주소: 깃허브아이디.github.io 저는 클라우드플레어를 이용중이고 설정한 예시 이미지는 아래와 같습니다.\n깃허브에서 커스텀 도메인 설정 원하는 저장소에서 Setting → Pages 을 차례로 클릭해 깃허브 페이지 설정창으로 이동합니다. Custom domain 항목을 찾아 입력란에 원하는 도메인을 입력 후 Save 버튼을 클릭합니다. 깃허브에서 DNS 확인을 진행하고, 이후 완료가 되면 해당 도메인으로 접근할 수 있게 됩니다. 아래의 사진은 DNS 설정 후 확인까지 마친 예시 이미지 입니다.\n참고자료 깃허브 공식: https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site Github 블로그에 Custom도메인 연결하기: https://mishka.kr/12 깃허브에 커스텀 도메인 사용하기: https://taedonn.tistory.com/22 깃허브 블로그 개인 도메인: https://wonderbout.tistory.com/120 ","date":"2024-01-30T22:36:50+09:00","permalink":"https://blog.plutslet.pe.kr/post/github_%EC%BB%A4%EC%8A%A4%ED%85%80_%EB%8F%84%EB%A9%94%EC%9D%B8/","title":"GitHub 페이지 커스텀 도메인 설정하기"},{"content":"Hugo 빌드 속도가 빠릅니다. 핫리로드 기능을 지원합니다. 한글로 작성해도 문제없이 출력됩니다. 요구사항 Git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Go: https://go.dev/doc/install 최신버전: go1.21.1.windows-amd64.msi Dart Sass 패치키 툴: https://chocolatey.org/install#individual\nwindow 기준 powershell을 관리자 권한으로 실행 → 아래 명령 복사 후 붙여넣기 → 엔터해서 설치\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) dart-sass: https://gohugo.io/hugo-pipes/transpile-sass-to-css/#dart-sass\n명령 실행 choco install sass Hugo 확장판 설치 위에서 설치한 패키지 툴을 이용해서 확장판설치 choco install hugo-extended Hugo로 블로그 구축하기 원하는 위치에서 hugo new site 폴더이름 해당 위치에 폴더이름으로 hugo 사이트가 만들어 진다. cd 폴더이름 git init https://themes.gohugo.io/ 해당 사이트에서 원하는 테마 찾기 찾은 테마 https://themes.gohugo.io/themes/hugo-theme-stack/ GitHub: https://github.com/CaiJimmy/hugo-theme-stack 테마 적용 - git submodule add git주소 themes/테마이름 예시: git submodule add https://github.com/CaiJimmy/hugo-theme-stack.git themes/stack hugo.toml 수정 baseURL 수정: https://깃허브아이디.github.io/ 테마 지정: theme = '테마이름’ / 예시: theme = 'stack’ 로컬 테스트: hugo server 깃허브에 업로드 깃허브에 업로드하기 위해서 레파지토리가 두개 필요합니다. Hugo로 만들어진 블로그 생성기 (private) Hugo가 랜더링한 정적 블로그 html (public) 레파지토리를 만든 이후 아래의 명령을 수정하고 입력하여 깃허브의 초기 설정을 진행합니다. git remote add origin 1번레파짓토리git주소 git submodule add -b master 2번레파짓토리git주소 public 깃허브 설정 이후 아래의 명령을 통해 빌드하여 깃허브에 업로드 합니다. hugo -D git add . git commit -m \u0026#34;test\u0026#34; git push origin master cd public git add . git commit -m \u0026#34;test\u0026#34; git push origin master 깃허브 페이지 활성화 위에서 만든 2번 레파지토리의 깃허브 페이지를 활성화하면 깃블로그 구축이 완료됩니다.\n참고자료 공식 설치 지침: https://gohugo.io/installation/windows/ 한글 자료Hugo로 개인 블로그 만드는 법: https://selfinvestfriends.tistory.com/78 GitHub Pages 빠른 시작: https://docs.github.com/ko/pages/quickstart 깃허브 페이지(GitHub Pages) 만들기: https://phodobit.kr/49 ","date":"2024-01-24T23:06:58+09:00","permalink":"https://blog.plutslet.pe.kr/post/hugo%EB%A1%9C_%EB%B8%94%EB%A1%9C%EA%B7%B8_%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"Hugo와 GitHub로 블로그 만들기"}]